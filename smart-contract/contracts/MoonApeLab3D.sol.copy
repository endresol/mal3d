// SPDX-License-Identifier: MIT

pragma solidity >=0.8.9 <0.9.0;

import "erc721a/contracts/extensions/ERC721AQueryable.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/common/ERC2981.sol";

interface IMoonStaking {
    function getTokenYield(
        address contractAddress,
        uint256 tokenId
    ) external view returns (uint256);

    function getStakerNFT(
        address staker
    )
        external
        view
        returns (
            uint256[] memory,
            uint256[] memory,
            uint256[] memory,
            uint256[] memory,
            uint256[] memory
        );

    function balanceOf(address owner) external view returns (uint256 balance);
}

interface IMoonPass {
    function balanceOf(address owner) external view returns (uint256 balance);

    function tokenOfOwnerByIndex(
        address owner,
        uint256 index
    ) external view returns (uint256 tokenId);

    function ownerOf(uint256 tokenId) external view returns (address owner);

    function pass_value_in_apes(
        uint256 _tokenId
    ) external view returns (uint256);
}

contract MoonApeLab3D is ERC721AQueryable, Ownable, ReentrancyGuard, ERC2981 {
    using Strings for uint256;
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdCounter;

    address public moonstakingaddress =
        0x8d10861Cd2BddE665110eAF12Dd0490215F30eE6;
    address public moonpassaddress = 0x8344BE53FB250dd76E65B6721B6553C21053Ee8d;

    mapping(uint256 => uint256) public match2dTo3d; // 2d token id to 3d token id
    mapping(uint256 => bool) public mintedGenesis;
    uint256 private matchedCounter;
    mapping(address => bool) public partnerCollections; // partner collections

    uint256[4] public royalties;
    uint256[3] public royaltyLevels;

    bytes32 public merkleRoot;
    mapping(address => bool) public ambassadorClaimed;
    mapping(address => bool) public partnerClaimed; // TODO remove this?
    mapping(address => uint256) public staffClaimed;

    string public uriPrefix = "https://api.moonapelab.io/mal3d/";
    string public uriSuffix = ".json";
    string public hiddenMetadataUri;

    uint256 public cost;
    uint256 public maxSupply;
    uint256 public maxMintAmountPerTx = 10;
    uint256 public maxMintAmountPerWallet = 30;

    bool public paused = true;
    bool public matchedMintEnabled = false;
    bool public partnerMintEnabled = false;
    bool public revealed = false;

    uint256 public mintPhase = 0;

    mapping(uint256 => uint256) private discount_steps;

    constructor(
        string memory _tokenName,
        string memory _tokenSymbol,
        uint256 _cost,
        uint256 _maxSupply,
        uint256 _maxMintAmountPerTx,
        string memory _hiddenMetadataUri
    ) ERC721A(_tokenName, _tokenSymbol) {
        // TODO remove all from constructor, use setter and defualts
        setCost(_cost);
        maxSupply = _maxSupply;
        setMaxMintAmountPerTx(_maxMintAmountPerTx);
        setHiddenMetadataUri(_hiddenMetadataUri);

        discount_steps[1] = 5;
        discount_steps[5] = 10;
        discount_steps[10] = 15;

        royalties = [1000, 500, 750, 250];
        royaltyLevels = [
            200000000000000000,
            500000000000000000,
            11000000000000000000
        ]; // 1eth, 0.5eth, 0.2eth
    }

    // ----- Modifiers ------

    modifier mintCompliance(uint256 _mintAmount) {
        require(
            _mintAmount > 0 && _mintAmount <= maxMintAmountPerTx,
            "Invalid mint amount!"
        );
        require(
            totalSupply() + _mintAmount <= maxSupply,
            "Max supply exceeded!"
        );
        _;
    }

    modifier mintPriceComplianceDiscount(
        uint256 _mintAmount,
        uint256 _discountToken
    ) {
        require(
            IMoonPass(moonpassaddress).ownerOf(_discountToken) == _msgSender(),
            "You are not the owner of this pass!"
        );
        uint256 value = IMoonPass(moonpassaddress).pass_value_in_apes(
            _discountToken
        );
        uint256 discount = discount_steps[value];
        require(
            msg.value >= ((cost * (100 - discount)) / 100) * _mintAmount,
            "Insufficient funds!"
        );
        _;
    }

    modifier mintPriceCompliance(uint256 _mintAmount) {
        require(msg.value >= cost * _mintAmount, "Insufficient funds!");
        _;
    }

    // ----- Mint Functions ------

    function matchedMint(
        uint256[] memory _tokens,
        bytes32[] calldata _merkleProof
    )
        public
        payable
        mintCompliance(_tokens.length)
        mintPriceCompliance(_tokens.length)
    {
        require(!paused, "The contract is paused!");
        require(
            (mintPhase == 1 || mintPhase == 3 || mintPhase == 4),
            "Snapshot mint is not enabled!"
        );

        bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));
        require(
            MerkleProof.verify(_merkleProof, merkleRoot, leaf),
            "Invalid proof!"
        );

        for (uint256 i = 0; i < _tokens.length; i++) {
            match2dTo3d[_tokenIdCounter.current() + 1] = _tokens[i];
            mintedGenesis[_tokens[i]] = true;
            _safeMint(_msgSender(), 1);
            _tokenIdCounter.increment();
        }
        matchedCounter = _tokenIdCounter.current();
    }

    function matchedMintDicounted(
        uint256[] memory _tokens,
        bytes32[] calldata _merkleProof,
        uint256 _discountToken
    )
        public
        payable
        mintCompliance(_tokens.length)
        mintPriceComplianceDiscount(_tokens.length, _discountToken)
    {
        require(!paused, "The contract is paused!");
        require(
            (mintPhase == 1 || mintPhase == 3 || mintPhase == 4),
            "Snapshot mint is not enabled!"
        );

        bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));
        require(
            MerkleProof.verify(_merkleProof, merkleRoot, leaf),
            "Invalid proof!"
        );

        for (uint256 i = 0; i < _tokens.length; i++) {
            match2dTo3d[_tokenIdCounter.current() + 1] = _tokens[i];
            mintedGenesis[_tokens[i]] = true;
            _safeMint(_msgSender(), 1);
            _tokenIdCounter.increment();
        }
        matchedCounter = _tokenIdCounter.current();
    }
    // TODO: make a _matchemint that both (or all three) matched mint functions can use.
    
    // phase 2 - free, not need for discount
    function limitedMatchedMint(
        uint256[] memory _tokens,
        bytes32[] calldata _merkleProof
    ) public payable {
        require(mintPhase == 2, "The Abassador mint is not enabled!");
        require(!ambassadorClaimed[_msgSender()], "Address already claimed!");
        // check wallet holdings or just one mint?
        matchedMint(_tokens, _merkleProof);
    }

    // phase 5
    function partnerMint(
        uint256 _mintAmount,
        address _collection
    )
        public
        payable
        mintCompliance(_mintAmount)
        mintPriceCompliance(_mintAmount)
    {
        require(mintPhase == 5, "The partner mint is not enabled!");
        // require(!partnerClaimed[_msgSender()], "Address already claimed!"); // TODO Remove limit?
        require(
            !partnerCollections[_collection],
            "Collection not whitelisted!"
        );

        require(
            IERC721(_collection).balanceOf(_msgSender()) > 0,
            "Address does not hold any partner NFTs!"
        );

        // partnerClaimed[_msgSender()] = true;  // TODO remove limit?
        _safeMint(_msgSender(), _mintAmount);
    }

    // PUBLIC MINT
    function mint(
        uint256 _mintAmount
    )
        public
        payable
        mintCompliance(_mintAmount)
        mintPriceCompliance(_mintAmount)
    {
        require(!paused, "The contract is paused!");
        require(mintPhase == 6, "Public mint not started");
        _safeMint(_msgSender(), _mintAmount);
    }

    function mintDiscount(
        uint256 _mintAmount,
        uint256 _discountToken
    )
        public
        payable
        mintCompliance(_mintAmount)
        mintPriceComplianceDiscount(_mintAmount, _discountToken)
    {
        require(!paused, "The contract is paused!");
        require(mintPhase == 6, "Public mint not started");

        _safeMint(_msgSender(), _mintAmount);
    }

    function mintForAddress(
        uint256 _mintAmount,
        address _receiver
    ) public mintCompliance(_mintAmount) onlyOwner {
        _safeMint(_receiver, _mintAmount);
    }

    function getMintPhase() public view returns (uint256) {
        return mintPhase;
    }

    function is2dMinted(uint256 _2dTokenId) public view returns (bool) {
        return mintedGenesis[_2dTokenId];
    }

    // ----- Admin Functions ------
    function _startTokenId() internal view virtual override returns (uint256) {
        return 1;
    }

    function tokenURI(
        uint256 _tokenId
    ) public view virtual override returns (string memory) {
        require(
            _exists(_tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        if (_tokenId > matchedCounter || revealed == false) {
            return hiddenMetadataUri;
        }

        string memory currentBaseURI = _baseURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        _tokenId.toString(),
                        uriSuffix
                    )
                )
                : "";
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return uriPrefix;
    }

    // ----- Start mintphase function ------
    // TODO: Remove and add one function to set all params
    function startStaffPhase(bytes32 _merkleRoot) public onlyOwner {
        mintPhase = 1;
        merkleRoot = _merkleRoot;
        maxMintAmountPerTx = 10;
        setCost(0);
    }

    function startAmbassadorPhase(bytes32 _merkleRoot) public onlyOwner {
        mintPhase = 2;
        merkleRoot = _merkleRoot;
        maxMintAmountPerTx = 3;
        setCost(0); // free
    }

    function startSnapshotPhase(bytes32 _merkleRoot) public onlyOwner {
        mintPhase = 3;
        merkleRoot = _merkleRoot;
        maxMintAmountPerTx = 20;
        setCost(50000000000000000); // 0.05 ETH
    }

    function startSnapshot2Phase(bytes32 _merkleRoot) public onlyOwner {
        mintPhase = 4;
        merkleRoot = _merkleRoot;
        maxMintAmountPerTx = 20;
        setCost(60000000000000000); // 0.06 ETH
    }

    function startPartnerPhase() public onlyOwner {
        mintPhase = 5;
        maxMintAmountPerTx = 5;
        setCost(70000000000000000); // 0.07 ETH
    }

    function startPublicPhase() public onlyOwner {
        mintPhase = 6;
        maxMintAmountPerTx = 5;
        setCost(90000000000000000); // 0.09 ETH
    }

    // ----- Only Owner Functions ------

    function setRevealed(bool _state) public onlyOwner {
        revealed = _state;
    }

    function setCost(uint256 _cost) public onlyOwner {
        cost = _cost;
    }

    function setMaxMintAmountPerTx(
        uint256 _maxMintAmountPerTx
    ) public onlyOwner {
        maxMintAmountPerTx = _maxMintAmountPerTx;
    }

    function setMaxMintAmountPerWallet(
        uint256 _maxMintAmountPerWallet
    ) public onlyOwner {
        maxMintAmountPerWallet = _maxMintAmountPerWallet;
    }

    function setHiddenMetadataUri(
        string memory _hiddenMetadataUri
    ) public onlyOwner {
        hiddenMetadataUri = _hiddenMetadataUri;
    }

    function setUriPrefix(string memory _uriPrefix) public onlyOwner {
        uriPrefix = _uriPrefix;
    }

    function setUriSuffix(string memory _uriSuffix) public onlyOwner {
        uriSuffix = _uriSuffix;
    }

    function setPaused(bool _state) public onlyOwner {
        paused = _state;
    }

    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
        merkleRoot = _merkleRoot;
    }

    function setMatchedMintEnabled(bool _state) public onlyOwner {
        matchedMintEnabled = _state;
    }

    function setPartnerMintEnabled(bool _state) public onlyOwner {
        partnerMintEnabled = _state;
    }

    function addPartnerCollection(address _collection) public onlyOwner {
        partnerCollections[_collection] = true;
    }

    function removePartnerCollection(address _collection) public onlyOwner {
        partnerCollections[_collection] = false;
    }

    function royaltyInfo(
        uint256,
        uint256 _salePrice
    ) public view virtual override returns (address, uint256) {
        uint256 _royalty = 1000;
        if (_salePrice <= royaltyLevels[0]) _royalty = royalties[0];
        else if (_salePrice <= royaltyLevels[1]) _royalty = royalties[1];
        else if (_salePrice <= royaltyLevels[2]) _royalty = royalties[2];
        else _royalty = royalties[3];

        uint256 royaltyAmount = (_salePrice * _royalty) / _feeDenominator();
        return (owner(), royaltyAmount);
    }

    function supportsInterface(
        bytes4 interfaceId
    ) public view virtual override(ERC721A, ERC2981) returns (bool) {
        return
            ERC721A.supportsInterface(interfaceId) ||
            ERC2981.supportsInterface(interfaceId);
    }

    function withdraw() public onlyOwner nonReentrant {
        // This will transfer the contract balance to the owner.
        // Do not remove this otherwise you will not be able to withdraw the funds.
        // =============================================================================
        (bool os, ) = payable(owner()).call{value: address(this).balance}("");
        require(os);
        // =============================================================================
    }
}
